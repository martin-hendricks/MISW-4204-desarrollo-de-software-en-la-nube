"""Initial migration with players, videos and votes tables

Revision ID: 7ea02b3bb4ea
Revises: e8b9b3268004
Create Date: 2025-10-11 14:41:33.780852

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7ea02b3bb4ea'
down_revision = 'e8b9b3268004'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_tasks_id', table_name='tasks')
    op.drop_table('tasks')
    
    # Actualizar valores null antes de aplicar restricciones NOT NULL
    op.execute("UPDATE players SET is_active = TRUE WHERE is_active IS NULL")
    op.execute("UPDATE players SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE players SET updated_at = NOW() WHERE updated_at IS NULL")
    
    op.alter_column('players', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('players', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('players', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # Actualizar valores null de videos antes de aplicar restricciones NOT NULL
    op.execute("UPDATE videos SET votes_count = 0 WHERE votes_count IS NULL")
    op.execute("UPDATE videos SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE videos SET updated_at = NOW() WHERE updated_at IS NULL")
    
    # Convertir valores de status en minúsculas a mayúsculas
    op.execute("UPDATE videos SET status = UPPER(status)")
    
    # Crear el enum type si no existe
    op.execute("CREATE TYPE videostatusenum AS ENUM ('UPLOADED', 'PROCESSING', 'PROCESSED', 'FAILED')")
    
    # Convertir los valores de status existentes al nuevo enum
    op.execute("""
        ALTER TABLE videos 
        ALTER COLUMN status TYPE videostatusenum 
        USING status::text::videostatusenum
    """)
    
    op.alter_column('videos', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('UPLOADED', 'PROCESSING', 'PROCESSED', 'FAILED', name='videostatusenum'),
               nullable=False)
    op.alter_column('videos', 'votes_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('videos', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('videos', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_videos_player_id'), 'videos', ['player_id'], unique=False)
    op.alter_column('votes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_votes_video_id'), 'votes', ['video_id'], unique=False)
    op.create_index(op.f('ix_votes_voter_id'), 'votes', ['voter_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_votes_voter_id'), table_name='votes')
    op.drop_index(op.f('ix_votes_video_id'), table_name='votes')
    op.alter_column('votes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_videos_player_id'), table_name='videos')
    op.alter_column('videos', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('videos', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('videos', 'votes_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('videos', 'status',
               existing_type=sa.Enum('UPLOADED', 'PROCESSING', 'PROCESSED', 'FAILED', name='videostatusenum'),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('players', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('players', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('players', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('video_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], name='tasks_video_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    sa.UniqueConstraint('task_id', name='tasks_task_id_key')
    )
    op.create_index('ix_tasks_id', 'tasks', ['id'], unique=False)
    # ### end Alembic commands ###
